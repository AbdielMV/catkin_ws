// Generated by gencpp from file whole_body_state_msgs/Rhonn.msg
// DO NOT EDIT!


#ifndef WHOLE_BODY_STATE_MSGS_MESSAGE_RHONN_H
#define WHOLE_BODY_STATE_MSGS_MESSAGE_RHONN_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace whole_body_state_msgs
{
template <class ContainerAllocator>
struct Rhonn_
{
  typedef Rhonn_<ContainerAllocator> Type;

  Rhonn_()
    : name()
    , position(0.0)
    , velocity(0.0)
    , error_w1(0.0)
    , error_w2(0.0)
    , effort(0.0)  {
    }
  Rhonn_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , position(0.0)
    , velocity(0.0)
    , error_w1(0.0)
    , error_w2(0.0)
    , effort(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef double _position_type;
  _position_type position;

   typedef double _velocity_type;
  _velocity_type velocity;

   typedef double _error_w1_type;
  _error_w1_type error_w1;

   typedef double _error_w2_type;
  _error_w2_type error_w2;

   typedef double _effort_type;
  _effort_type effort;





  typedef boost::shared_ptr< ::whole_body_state_msgs::Rhonn_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::whole_body_state_msgs::Rhonn_<ContainerAllocator> const> ConstPtr;

}; // struct Rhonn_

typedef ::whole_body_state_msgs::Rhonn_<std::allocator<void> > Rhonn;

typedef boost::shared_ptr< ::whole_body_state_msgs::Rhonn > RhonnPtr;
typedef boost::shared_ptr< ::whole_body_state_msgs::Rhonn const> RhonnConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::whole_body_state_msgs::Rhonn_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::whole_body_state_msgs::Rhonn_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace whole_body_state_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/home/abdiel/MATLAB/R2021b/sys/ros1/glnxa64/ros1/share/geometry_msgs/cmake/../msg'], 'whole_body_state_msgs': ['/home/abdiel/catkin_ws/src/matlab_msg_gen_ros1/glnxa64/src/whole_body_state_msgs/msg'], 'std_msgs': ['/home/abdiel/MATLAB/R2021b/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/home/abdiel/MATLAB/R2021b/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::whole_body_state_msgs::Rhonn_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::whole_body_state_msgs::Rhonn_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::whole_body_state_msgs::Rhonn_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::whole_body_state_msgs::Rhonn_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::whole_body_state_msgs::Rhonn_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::whole_body_state_msgs::Rhonn_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::whole_body_state_msgs::Rhonn_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2f2e10869d748da4cbaa5fbe0d27146b";
  }

  static const char* value(const ::whole_body_state_msgs::Rhonn_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2f2e10869d748da4ULL;
  static const uint64_t static_value2 = 0xcbaa5fbe0d27146bULL;
};

template<class ContainerAllocator>
struct DataType< ::whole_body_state_msgs::Rhonn_<ContainerAllocator> >
{
  static const char* value()
  {
    return "whole_body_state_msgs/Rhonn";
  }

  static const char* value(const ::whole_body_state_msgs::Rhonn_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::whole_body_state_msgs::Rhonn_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message describes the state of an actuated joints.\n"
"#\n"
"# The state of each joint (revolute or prismatic) is defined by:\n"
"#  * the joint name\n"
"#  * the position of the joint (rad or m),\n"
"#  * the velocity of the joint (rad/s or m/s), and\n"
"#  * the effort that is applied in the joint (Nm or N).\n"
"#\n"
"# Each joint is uniquely identified by its name\n"
"\n"
"\n"
"# Name of the joint\n"
"string name\n"
"\n"
"# States of the joint\n"
"float64 position\n"
"float64 velocity\n"
"float64 error_w1\n"
"float64 error_w2\n"
"float64 effort\n"
;
  }

  static const char* value(const ::whole_body_state_msgs::Rhonn_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::whole_body_state_msgs::Rhonn_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.position);
      stream.next(m.velocity);
      stream.next(m.error_w1);
      stream.next(m.error_w2);
      stream.next(m.effort);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Rhonn_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::whole_body_state_msgs::Rhonn_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::whole_body_state_msgs::Rhonn_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "position: ";
    Printer<double>::stream(s, indent + "  ", v.position);
    s << indent << "velocity: ";
    Printer<double>::stream(s, indent + "  ", v.velocity);
    s << indent << "error_w1: ";
    Printer<double>::stream(s, indent + "  ", v.error_w1);
    s << indent << "error_w2: ";
    Printer<double>::stream(s, indent + "  ", v.error_w2);
    s << indent << "effort: ";
    Printer<double>::stream(s, indent + "  ", v.effort);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WHOLE_BODY_STATE_MSGS_MESSAGE_RHONN_H
