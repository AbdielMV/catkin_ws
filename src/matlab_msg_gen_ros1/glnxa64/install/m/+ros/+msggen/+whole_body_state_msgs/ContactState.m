
classdef ContactState < ros.Message
    %ContactState MATLAB implementation of whole_body_state_msgs/ContactState
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.
    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'whole_body_state_msgs/ContactState' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'b02d1e064d7bfebaee1f4ca22e691c9c' % The MD5 Checksum of the message definition
        PropertyList = { 'Pose' 'Velocity' 'Wrench' 'SurfaceNormal' 'Name' 'Type' 'FrictionCoefficient' } % List of non-constant message properties
        ROSPropertyList = { 'pose' 'velocity' 'wrench' 'surface_normal' 'name' 'type' 'friction_coefficient' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.geometry_msgs.Pose' ...
            'ros.msggen.geometry_msgs.Twist' ...
            'ros.msggen.geometry_msgs.Wrench' ...
            'ros.msggen.geometry_msgs.Vector3' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
        Locomotion = uint8(0)
        Manipulation = uint8(1)
    end
    properties
        Pose
        Velocity
        Wrench
        SurfaceNormal
        Name
        Type
        FrictionCoefficient
    end
    methods
        function set.Pose(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.Pose'};
            validateattributes(val, validClasses, validAttributes, 'ContactState', 'Pose')
            obj.Pose = val;
        end
        function set.Velocity(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.Twist'};
            validateattributes(val, validClasses, validAttributes, 'ContactState', 'Velocity')
            obj.Velocity = val;
        end
        function set.Wrench(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.Wrench'};
            validateattributes(val, validClasses, validAttributes, 'ContactState', 'Wrench')
            obj.Wrench = val;
        end
        function set.SurfaceNormal(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.Vector3'};
            validateattributes(val, validClasses, validAttributes, 'ContactState', 'SurfaceNormal')
            obj.SurfaceNormal = val;
        end
        function set.Name(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'ContactState', 'Name');
            obj.Name = char(val);
        end
        function set.Type(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ContactState', 'Type');
            obj.Type = uint8(val);
        end
        function set.FrictionCoefficient(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ContactState', 'FrictionCoefficient');
            obj.FrictionCoefficient = double(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.whole_body_state_msgs.ContactState.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.whole_body_state_msgs.ContactState(strObj);
        end
    end
end
